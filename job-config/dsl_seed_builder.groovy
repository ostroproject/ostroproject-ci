//
// DSL script to generate build jobs
// Copyright (c) 2016, Intel Corporation.
//
// This program is free software; you can redistribute it and/or modify it
// under the terms and conditions of the GNU General Public License,
// version 2, as published by the Free Software Foundation.
//
// This program is distributed in the hope it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//

def job_name_prefix = 'build'

[ 'beaglebone' , 'edison' , 'intel-corei7-64' , 'intel-quark' ].each {
    println "gen-build-job: machine: ${it}";
    freeStyleJob("${job_name_prefix}_${it}") {
      properties {
        rebuild {
          autoRebuild(false)
          rebuildDisabled(false)
        }
      }
      label("ostro-builder")
      description("Automatically generated by dsl-seed-builder. Manual changes will be overriden by next seed job run.")
      logRotator {
        daysToKeep(-1)
        numToKeep(500)
        artifactDaysToKeep(-1)
        artifactNumToKeep(-1)
      }
      wrappers {
        sshAgent('github-auth-ssh')
        timestamps()
      }
      deliveryPipelineConfiguration('CI-Build', 'BitBake Build')

      concurrentBuild()
      disabled(DISABLE_JOBS.toBoolean())
      configure { project ->
        project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
          includes('ci/conf/**,ci/bin/build-image.sh')
          excludes('')
          flatten('false')
          includeAntExcludes('false')
          hudsonHomeRelative('false')
          relativeTo('somewhereElse')
        }
      }

      steps {
        environmentVariables {
          propertiesFile('./ci/conf/configuration')
        }
        shell('./ci/bin/build-image.sh')
        systemGroovyCommand("""
          def cause = build.causes.grep({ it instanceof hudson.model.Cause.UpstreamCause })[0]
          def upstream_build=jenkins.model.Jenkins.instance.getItem(cause.upstreamProject).getBuildByNumber(cause.upstreamBuild)
          to_copy = build.workspace.list().grep({ it.name.endsWith('testinfo.csv') }).collect({ it.name })
          for (it in to_copy) {
            println 'Copying file '+it+' to upstream build workspace'
            sf = new hudson.FilePath(build.workspace, it)
            df = new hudson.FilePath(upstream_build.workspace, it)
            sf.copyTo(df)
          }
        """)
      }
      publishers {
        groovyPostBuild('def run = Thread.currentThread().executable\n\
def en = run.getEnvironment()\n\
manager.addShortText(en["PARENT_BUILD_TAG"])\n\
', Behavior.DoNothing)
      }
  }
}

// generate build-finalize job
freeStyleJob('build-finalize') {
  label("coordinator")
  description("Automatically generated. Manual changes will be overriden by next seed job run.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-finalize.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-finalize.sh')
  }
}

// generate build-post job
freeStyleJob('build-post') {
  label("coordinator")
  description("Automatically generated. Manual changes will be overriden by next seed job run.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-post.sh,ci/bin/pr_serv_stop.sh,ci/bin/maintain-swupd-pr-cross-links.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell("""
ci/bin/build-post.sh
ci/bin/maintain-swupd-pr-cross-links.sh
""")
  }
}

// generate build-populate-sstate job
freeStyleJob('build-populate-sstate') {
  label("ostro-builder")
  description("Automatically generated. Manual changes will be overriden by next seed job run.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/populate-sstate.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/populate-sstate.sh')
  }
}

// generate build-prepare job
freeStyleJob('build-prepare') {
  label("coordinator")
  description("Automatically generated. Manual changes will be overriden by next seed job run.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-prepare.sh,ci/bin/pr_serv_start.sh,${CI_EXPORT}/$CI_TARBALL,${CI_EXPORT}/env.properties.${CI_BUILD_ID}')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
      allocatePorts('PRSERVER_PORT')
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-prepare.sh')
  }
}

// generate build-recipe-selftests job
freeStyleJob('build-recipe-selftests') {
  label("ostro-builder")
  description("Automatically generated. Unpack tarball prepared by calling job, run recipe selftests")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-recipe-selftests.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-recipe-selftests.sh')
  }
  publishers {
    groovyPostBuild('def run = Thread.currentThread().executable\n\
def en = run.getEnvironment()\n\
manager.addShortText(en["PARENT_BUILD_TAG"])\n\
', Behavior.DoNothing)
  }
}

// generate build-publish-buildhistory job
freeStyleJob('build-publish-buildhistory') {
  label("ostro-builder")
  description("Automatically generated. Publish buildhistory to DNL. This runs on a builder.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-publish-buildhistory.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-publish-buildhistory.sh')
  }
}

// generate build-publish-images job
freeStyleJob('build-publish-images') {
  label("coordinator")
  description("Automatically generated. Publish images to DNL. This runs on coordinator.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-publish-images.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-publish-images.sh')
  }
}

// generate build-publish-sources job
freeStyleJob('build-publish-sources') {
  label("ostro-builder")
  description("Automatically generated. Publish sources to DNL. This runs on a builder.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-publish-sources.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-publish-sources.sh')
  }
}

// generate build-publish-sstate job
freeStyleJob('build-publish-sstate') {
  label("ostro-builder")
  description("Automatically generated. Publish sstate to DNL. This runs on a builder.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  configure { project ->
    project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
      includes('ci/conf/configuration,ci/bin/build-publish-sstate.sh')
      excludes('')
      flatten('false')
      includeAntExcludes('false')
      hudsonHomeRelative('false')
      relativeTo('somewhereElse')
    }
  }
  wrappers {
      timestamps()
  }
  blockOn('ci_deploy_scripts') {
      blockLevel('GLOBAL')
      scanQueueFor('ALL')
  }
  steps {
    environmentVariables {
      propertiesFile('ci/conf/configuration')
    }
    shell('ci/bin/build-publish-sstate.sh')
  }
}

// generate build-publish-ostro-xt job
freeStyleJob('build-publish-ostro-xt') {
  label("docker")
  description("Automatically generated. Publish ostro-xt build results. This runs on a builder.")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
  wrappers {
      timestamps()
  }
  triggers {
      upstream('ostro-os-xt_master', 'SUCCESS')
  }
  steps {
    systemGroovyCommand(readFileFromWorkspace("job-config/copy_parent_env.groovy"))
    environmentVariables {
      propertiesFile('parent.env')
    }
    shell(readFileFromWorkspace("bin/build-publish-ostro-xt.sh"))
  }
}

// generate build-promote jobs of these types and users who can trigger:
def jobtypes = [
  'milestone': ['kad', 'mythi', 'okartau'],
  'qa-approved': ['mythi', 'testkit']
]

for (t in jobtypes) {
  type = t.key
  users = t.value
  freeStyleJob("build-promote_${type}") {
    description("Automatically generated. Promote one build as ${type}. This runs on download.")
    label("download")
    logRotator {
      daysToKeep(-1)
      numToKeep(99)
      artifactDaysToKeep(-1)
      artifactNumToKeep(-1)
    }
    for (u in users) {
      authorization {
        permission('hudson.model.Item.Read', u)
        permission('hudson.model.Item.Build', u)
      }
    }
    parameters {
      choiceParam('PROMOTED_PRODUCT', ['ostro-os', 'ostro-os-xt'])
      stringParam('PROMOTED_BUILD_TAG', '', 'CI_BUILD_ID of build to be promoted')
      stringParam('PROMOTED_NAME', 'none', 'Optional name given to promoted build')
    }
    steps {
      shell("""
_dest=\${BUILD_STORAGE_BASE}/releases/\${PROMOTED_PRODUCT}/${type}/\${PROMOTED_BUILD_TAG}

mkdir -p \${_dest}
cp -alu \${BUILD_STORAGE_BASE}/builds/\${PROMOTED_PRODUCT}/\${PROMOTED_BUILD_TAG}/* \${_dest}/

if [ "\${PROMOTED_NAME}" != "none" ]; then
  ln -vsf \${PROMOTED_BUILD_TAG} \${BUILD_STORAGE_BASE}/releases/\${PROMOTED_PRODUCT}/${type}/\${PROMOTED_NAME}
fi

# handle swupd links
_machdirs=""
[ -d \${_dest}/swupd ] && _machdirs=`ls -d \${_dest}/swupd/*`
if [ -n "\${_machdirs}" ]; then
  for _machdir in \${_machdirs}; do
    _mach=`basename \$_machdir`
    _streams=`ls -d \${_machdir}/*`
    for _strmdir in \${_streams}; do
      _strm=`basename \$_strmdir`
      _verdir=`ls -d \${_strmdir}/[0-9]*`
      _version=`basename \$_verdir`
      _linkbasedir=\${BUILD_STORAGE_BASE}/releases/\${PROMOTED_PRODUCT}/${type}/\${PROMOTED_BUILD_TAG}/swupd/\$_mach/\$_strm
      _linkdir=\${BUILD_STORAGE_BASE}/updates/\${PROMOTED_PRODUCT}/${type}/\$_mach/\$_strm
      mkdir -p \$_linkdir
      ln -vsfr \$_linkbasedir/\$_version \$_linkdir/\$_version
      ln -vsfr \$_linkbasedir/version   \$_linkdir/version
    done
  done
fi
""")
    }
  }
}
