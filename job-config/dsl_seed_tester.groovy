//
// DSL script to generate test jobs
// Copyright (c) 2016, Intel Corporation.
//
// This program is free software; you can redistribute it and/or modify it
// under the terms and conditions of the GNU General Public License,
// version 2, as published by the Free Software Foundation.
//
// This program is distributed in the hope it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//

def job_name_prefix = 'test'
// targets are boards we are testing on. A tester job is generated for each.
// Each tester job is configured with MACHINE it takes image from, which is one of machines listed below.
String[] targets = [ 'edison' , 'galileov2' , 'gigabyte' , 'minnowboardmax', 'beagleboneblack' ]
// machines are bitbake targets that build_* jobs build for.
// Note index-based mapping: targets[i] will test image built at machines[i]
String[] machines = [ 'edison' , 'intel-quark' , 'intel-corei7-64' , 'intel-corei7-64' , 'beaglebone' ]

for (int i = 0; i < targets.size() ; i++) {
    target = targets[i]
    machine = machines[i]
    println "gen-test-job: target: ${target} machine: ${machine}";
    freeStyleJob("${job_name_prefix}_${target}") {
      properties {
        rebuild {
          autoRebuild(false)
          rebuildDisabled(false)
        }
      }
      label("test-controller")
      description("Automatically generated by dsl-seed-tester. Manual changes will be overriden by next seed job run.")
      logRotator {
        daysToKeep(-1)
        numToKeep(500)
        artifactDaysToKeep(-1)
        artifactNumToKeep(-1)
      }
      wrappers {
        timestamps()
        preBuildCleanup()
      }
      deliveryPipelineConfiguration('CI-Auto-Testing', 'Automatic Acceptance Tests')

      concurrentBuild()
      disabled(DISABLE_JOBS.toBoolean())
      configure { project ->
        project / 'buildWrappers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper' {
          includes('ci/bin/tester-exec.sh')
          excludes('')
          flatten('false')
          includeAntExcludes('false')
          hudsonHomeRelative('false')
          relativeTo('somewhereElse')
        }
      }

      steps {
        environmentVariables {
          env('MACHINE', "${machine}")
          env('TARGET', "${target}")
        }
        shell('./ci/bin/tester-exec.sh')
      }
      publishers {
        archiveXUnit {
          jUnit {
            pattern('TEST-*.xml')
            failIfNotNew(false)
          }
          failedThresholds {
            unstable(9999)
            unstableNew(9999)
            failure(0)
            failureNew(0)
          }
          skippedThresholds {
            unstable(9999)
            unstableNew(9999)
            failure(9999)
            failureNew(9999)
          }
          thresholdMode(ThresholdMode.NUMBER)
          timeMargin(3000)
        }
        archiveArtifacts('**/*.log, **/*.xml, **/aft-results-*.tar.bz2')
        configure { project ->
          project / 'publishers' / 'com.michelin.cio.hudson.plugins.copytoslave.CopyToMasterNotifier' {
            includes('**/*.log, **/*.xml, **/aft-results-*.tar.bz2')
            excludes('')
            overrideDestinationFolder('true')
            destinationFolder("\${CI_TESTRESULTS_CACHE}/\${CI_BUILD_ID}-\${CI_PUBLISH_NAME}-testing_\${TARGET}/")
            runAfterResultFinalised('false')
          }
        }
        groovyPostBuild('def run = Thread.currentThread().executable\n\
def en = run.getEnvironment()\n\
manager.addShortText(en["CI_PUBLISH_NAME"] + "-" + en["CI_BUILD_ID"])\n\
', Behavior.DoNothing)
      }
  }
}

// test target devices health checker job
freeStyleJob('tester-check-device-configs') {
  // This should run on testers controller host where tests run using aft
  label("ostro-tester")
  description("Automatically generated. Check target devices using aft --checkall")
  logRotator {
    daysToKeep(-1)
    numToKeep(99)
    artifactDaysToKeep(-1)
    artifactNumToKeep(-1)
  }
//// used to be cron-activated, but not really useful that way.
//// Lets keep the job configured for manual activation only.
//  triggers {
//      cron("H 14 * * *")
//  }
  steps {
    shell("""
rm -f *.log
aft --checkall
ret_val=\$?
# AFT renames logs after shutdown (logging is run in separate process).
# Give this process some time to finish, as otherwise it may interfere
# with jenkins artifact processing (ENOENTs when files suddenly disappear)
sleep 10
exit \$ret_val
""")
  }
  publishers {
    archiveArtifacts('*.log')
  }
}
